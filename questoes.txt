*****************************************************************************************************
T290 - Resolução de Problemas com Grafos
Orientador: Prof. Me Ricardo Carubbi
*****************************************************************************************************

Trabalho: Problema do Caixeiro Viajante

Informe abaixo o(s) nome(s):
- Aluno(a) 1: Rodrigo Cirino Cavalcante Lima
- Aluno(a) 2: Erfon Spanos

Q1. Explique como você implementou a heurística de inserção pelo vizinho mais próximo.
Comente também como você atualiza as ligações da lista encadeada circular após inserir o novo ponto.

Resposta:

A heurística foi implementada no método insertNearestNaive. Para cada novo ponto, o algoritmo percorre a 
lista circular existente para encontrar o ponto (nearestNode) com a menor distância euclidiana. 
A inserção é feita em tempo constante (O(1)) atualizando duas referências: o next do nearestNode passa a 
apontar para o novo nó, e o next do novo nó passa a apontar para o antigo sucessor do nearestNode.


Q2. Explique por que é melhor usar uma lista encadeada circular em vez de um vetor.
Considere a complexidade das operações de inserção e remoção de pontos.

Resposta:

A lista encadeada é superior porque sua operação de inserção tem complexidade , enquanto a de um vetor é em um vetor,
a inserção no meio da estrutura exige o deslocamento de múltiplos elementos, tornando-se ineficiente para as inserções 
repetidas que esta heurística exige. A lista encadeada realiza a mesma inserção apenas atualizando ponteiros, o que é 
significativamente mais .


Q3. Preencha os comprimentos calculados pela heurística do vizinho mais próximo.

| Arquivo de dados | Vizinho mais próximo |
| ---------------- | -------------------- |
| tsp10.txt        |      1566.1363       |
| tsp100.txt       |      7389.9297       |
| tsp1000.txt      |      27868.7106      |
| usa13509.txt     |      77449.9794      |

Q4. Realize a análise de tempo abaixo:

- Estime o tempo de execução (em segundos) da heurística.
- Execute a heurística para \(n = 1000\) e dobre \(n\) repetidamente até que o tempo de execução ultrapasse 60 segundos.
- Utilize o **TSPTimer** com a opção **-Xint** para desativar otimizações do compilador.

| n      | Tempo (s) ingênuo | Tempo (s) com KdTree |
| ------ | ----------------- | -------------------- |
| 1000   |                   |                      |
| 2000   |                   |                      |
| 4000   |                   |                      |
| 8000   |                   |                      |
| 16000  |                   |                      |
| 32000  |                   |                      |
| 64000  |                   |                      |
| 128000 |                   |                      |
| 256000 |                   |                      |
| 512000 |                   |                      |
| 1024000|                   |                      |
