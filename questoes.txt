*****************************************************************************************************
T290 - Resolução de Problemas com Grafos
Orientador: Prof. Me Ricardo Carubbi
*****************************************************************************************************

Trabalho: Problema do Caixeiro Viajante

Informe abaixo o(s) nome(s):
- Aluno(a) 1: Rodrigo Cirino Cavalcante Lima
- Aluno(a) 2: Erfon Spanos

Q1. Explique como você implementou a heurística de inserção pelo vizinho mais próximo.
Comente também como você atualiza as ligações da lista encadeada circular após inserir o novo ponto.

Resposta:

A heurística foi implementada no método insertNearestNaive. Para cada novo ponto, o algoritmo percorre a 
lista circular existente para encontrar o ponto (nearestNode) com a menor distância euclidiana. 
A inserção é feita em tempo constante (O(1)) atualizando duas referências: o next do nearestNode passa a 
apontar para o novo nó, e o next do novo nó passa a apontar para o antigo sucessor do nearestNode.

Adicionalmente, para otimizar a busca pelo vizinho mais próximo, foi implementado um segundo método, insertNearestKd. 
Nesta abordagem, todos os pontos já inseridos no tour são mantidos em uma estrutura de dados KdTree. Em vez de 
percorrer a lista inteira (uma busca de complexidade O(N)), a KdTree é utilizada para encontrar o ponto mais próximo
em tempo médio de O(log N). Isso reduz drasticamente o tempo de execução da heurística para grandes conjuntos de pontos, 
mesmo que a lógica de atualização da lista encadeada permaneça a mesma após a identificação do vizinho.


Q2. Explique por que é melhor usar uma lista encadeada circular em vez de um vetor.
Considere a complexidade das operações de inserção e remoção de pontos.

Resposta:

A lista encadeada é superior porque sua operação de inserção tem complexidade , enquanto a de um vetor é em um vetor,
a inserção no meio da estrutura exige o deslocamento de múltiplos elementos, tornando-se ineficiente para as inserções 
repetidas que esta heurística exige. A lista encadeada realiza a mesma inserção apenas atualizando ponteiros, o que é 
significativamente mais .


Q3. Preencha os comprimentos calculados pela heurística do vizinho mais próximo.

| Arquivo de dados | Vizinho mais próximo |
| ---------------- | -------------------- |
| tsp10.txt        |      1566.1363       |
| tsp100.txt       |      7389.9297       |
| tsp1000.txt      |      27868.7106      |
| usa13509.txt     |      77449.9794      |

Q4. Realize a análise de tempo abaixo:

- Estime o tempo de execução (em segundos) da heurística.
- Execute a heurística para \(n = 1000\) e dobre \(n\) repetidamente até que o tempo de execução ultrapasse 60 segundos.
- Utilize o **TSPTimer** com a opção **-Xint** para desativar otimizações do compilador.

| n      | Tempo (s) ingênuo | Tempo (s) com KdTree |
| ------ | ----------------- | -------------------- |
| 1000   |       0.026       |        0.115         |
| 2000   |       0.102       |        0.239         |
| 4000   |       0.323       |        0.579         |
| 8000   |       1.424       |        1.509         |
| 16000  |       5.573       |        4.541         |
| 32000  |      22.036       |       15.003         |
| 64000  |      87.702       |       68.098         |
| 128000 |     351.934       |      322.876         |
| 256000 |                   |                      |
| 512000 |                   |                      |
| 1024000|                   |                      |
